/* gvSIG. Sistema de Información Geográfica de la Generalitat Valenciana
 *
 * Copyright (C) 2004 IVER T.I. and Generalitat Valenciana.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,USA.
 *
 * For more information, contact:
 *
 *  Generalitat Valenciana
 *   Conselleria d'Infraestructures i Transport
 *   Av. Blasco Ibáñez, 50
 *   46010 VALENCIA
 *   SPAIN
 *
 *      +34 963862235
 *   gvsig@gva.es
 *      www.gvsig.gva.es
 *
 *    or
 *
 *   IVER T.I. S.A
 *   Salamanca 50
 *   46005 Valencia
 *   Spain
 *
 *   +34 963163400
 *   dac@iver.es
 */
package com.iver.cit.gvsig.gui.cad.tools;

import java.awt.Graphics;
import java.awt.event.InputEvent;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.util.ArrayList;

import com.hardcode.gdbms.driver.exceptions.ReadDriverException;
import com.iver.andami.PluginServices;
import com.iver.andami.messages.NotificationManager;
import com.iver.cit.gvsig.CADExtension;
import com.iver.cit.gvsig.fmap.core.DefaultFeature;
import com.iver.cit.gvsig.fmap.core.FGeometryCollection;
import com.iver.cit.gvsig.fmap.core.FShape;
import com.iver.cit.gvsig.fmap.core.GeneralPathX;
import com.iver.cit.gvsig.fmap.core.IGeometry;
import com.iver.cit.gvsig.fmap.core.ShapeFactory;
import com.iver.cit.gvsig.fmap.core.v02.FConverter;
import com.iver.cit.gvsig.fmap.edition.DefaultRowEdited;
import com.iver.cit.gvsig.fmap.edition.EditionEvent;
import com.iver.cit.gvsig.fmap.edition.IRowEdited;
import com.iver.cit.gvsig.fmap.edition.VectorialEditableAdapter;
import com.iver.cit.gvsig.gui.cad.DefaultCADTool;
import com.iver.cit.gvsig.gui.cad.exception.CommandException;
import com.iver.cit.gvsig.gui.cad.tools.smc.ExploitCADToolContext;
import com.iver.cit.gvsig.layers.VectorialLayerEdited;

/**
 * Elimina la geometría compuesta y añade todas la geometrías simples que la
 * componen, implementado para polilíneas y polígonos.
 * 
 * @author Vicente Caballero Navarro
 */
public class ExploitCADTool extends DefaultCADTool {
    private ExploitCADToolContext _fsm;

    /**
     * Crea un nuevo ExploitCADTool.
     */
    public ExploitCADTool() {
    }

    /**
     * Método de inicio, para poner el código de todo lo que se requiera de una
     * carga previa a la utilización de la herramienta.
     */
    @Override
    public void init() {
	_fsm = new ExploitCADToolContext(this);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.iver.cit.gvsig.gui.cad.CADTool#transition(com.iver.cit.gvsig.fmap
     * .layers.FBitSet, double, double)
     */
    public void transition(double x, double y, InputEvent event) {
	_fsm.addPoint(x, y, event);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.iver.cit.gvsig.gui.cad.CADTool#transition(com.iver.cit.gvsig.fmap
     * .layers.FBitSet, double)
     */
    public void transition(double d) {
	_fsm.addValue(d);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.iver.cit.gvsig.gui.cad.CADTool#transition(com.iver.cit.gvsig.fmap
     * .layers.FBitSet, java.lang.String)
     */
    public void transition(String s) throws CommandException {
	if (!super.changeCommand(s)) {
	    _fsm.addOption(s);
	}
    }

    /**
     * DOCUMENT ME!
     */
    public void selection() {
	ArrayList selectedRows = getSelectedRows();
	if (selectedRows.size() == 0
		&& !CADExtension
			.getCADTool()
			.getClass()
			.getName()
			.equals("com.iver.cit.gvsig.gui.cad.tools.SelectionCADTool")) {
	    CADExtension.setCADTool("_selection", false);
	    ((SelectionCADTool) CADExtension.getCADTool())
		    .setNextTool("_exploit");
	}
    }

    /**
     * Equivale al transition del prototipo pero sin pasarle como parámetro el
     * editableFeatureSource que ya estará creado.
     * 
     * @param x
     *            parámetro x del punto que se pase en esta transición.
     * @param y
     *            parámetro y del punto que se pase en esta transición.
     */
    public void addPoint(double x, double y, InputEvent event) {
    }

    /**
     * Método para dibujar la lo necesario para el estado en el que nos
     * encontremos.
     * 
     * @param g
     *            Graphics sobre el que dibujar.
     * @param x
     *            parámetro x del punto que se pase para dibujar.
     * @param y
     *            parámetro x del punto que se pase para dibujar.
     */
    public void drawOperation(Graphics g, double x, double y) {
    }

    public void exploit() {
	ArrayList selectedRow = getSelectedRows();
	ArrayList selectedRowAux = new ArrayList();
	VectorialLayerEdited vle = getVLE();
	VectorialEditableAdapter vea = vle.getVEA();
	try {
	    vea.startComplexRow();
	    for (int i = 0; i < selectedRow.size(); i++) {
		DefaultRowEdited dre = (DefaultRowEdited) selectedRow.get(i);
		DefaultFeature df = (DefaultFeature) dre.getLinkedRow()
			.cloneRow();
		IGeometry geom = df.getGeometry();
		vea.removeRow(dre.getIndex(), getName(), EditionEvent.GRAPHIC);
		if (geom instanceof FGeometryCollection) {
		    exploitGeometryCollection(dre, selectedRowAux);
		} else {
		    if (geom.getGeometryType() == FShape.LINE) {
			exploitLine(dre, selectedRowAux);
		    } else if (geom.getGeometryType() == FShape.POLYGON) {
			exploitPolygon(dre, selectedRowAux);
		    }
		}

	    }
	    vea.endComplexRow(getName());
	    vle.setSelectionCache(VectorialLayerEdited.NOTSAVEPREVIOUS,
		    selectedRowAux);
	    // clearSelection();
	    // selectedRow.addAll(selectedRowAux);
	} catch (ReadDriverException e) {
	    NotificationManager.addError(e.getMessage(), e);
	}
    }

    private void exploitGeometryCollection(DefaultRowEdited dre,
	    ArrayList selectedRowAux) {
	DefaultFeature df = (DefaultFeature) dre.getLinkedRow().cloneRow();
	IGeometry geom = df.getGeometry();
	FGeometryCollection gc = (FGeometryCollection) geom;
	IGeometry[] geoms = gc.getGeometries();
	for (int i = 0; i < geoms.length; i++) {
	    DefaultFeature dfAux = (DefaultFeature) df.cloneRow();
	    int index = addGeometry(geoms[i], dfAux.getAttributes());
	    selectedRowAux.add(new DefaultRowEdited(dfAux,
		    IRowEdited.STATUS_ADDED, index));
	}
	refresh();
    }

    private void exploitLine(DefaultRowEdited dre, ArrayList selectedRowAux) {
	GeneralPathX newGp1 = new GeneralPathX();
	DefaultFeature df = (DefaultFeature) dre.getLinkedRow().cloneRow();
	// Point2D firstPoint=null;
	// Point2D lastPoint=null;
	PathIterator theIterator = df.getGeometry().getPathIterator(null,
		FConverter.FLATNESS);
	double[] theData = new double[6];
	int theType;
	int numParts = 0;
	Point2D initialPoint = null;
	while (!theIterator.isDone()) {
	    theType = theIterator.currentSegment(theData);
	    switch (theType) {

	    case PathIterator.SEG_MOVETO:
		numParts++;
		newGp1 = new GeneralPathX();
		// firstPoint=new Point2D.Double(theData[0], theData[1]);
		initialPoint = new Point2D.Double(theData[0], theData[1]);
		newGp1.moveTo(theData[0], theData[1]);
		// lastPoint=new Point2D.Double(theData[0], theData[1]);
		break;

	    case PathIterator.SEG_LINETO:
		newGp1.lineTo(theData[0], theData[1]);
		IGeometry geomLine = ShapeFactory.createPolyline2D(newGp1);
		DefaultFeature dfLine = (DefaultFeature) df.cloneRow();
		dfLine.setGeometry(geomLine);
		int indexLine = addGeometry(geomLine, dfLine.getAttributes());
		selectedRowAux.add(new DefaultRowEdited(dfLine,
			IRowEdited.STATUS_ADDED, indexLine));
		newGp1 = new GeneralPathX();
		newGp1.moveTo(theData[0], theData[1]);
		// lastPoint=new Point2D.Double(theData[0], theData[1]);
		break;
	    case PathIterator.SEG_CLOSE:
		if (initialPoint != null) {
		    newGp1.lineTo(initialPoint.getX(), initialPoint.getY());
		    geomLine = ShapeFactory.createPolyline2D(newGp1);
		    dfLine = (DefaultFeature) df.cloneRow();
		    dfLine.setGeometry(geomLine);
		    indexLine = addGeometry(geomLine, dfLine.getAttributes());
		    selectedRowAux.add(new DefaultRowEdited(dfLine,
			    IRowEdited.STATUS_ADDED, indexLine));
		    newGp1 = new GeneralPathX();
		    newGp1.moveTo(initialPoint.getX(), initialPoint.getY());
		}
		break;
	    /*
	     * case PathIterator.SEG_QUADTO: Point2D
	     * current=newGp1.getCurrentPoint(); newGp1.quadTo(theData[0],
	     * theData[1], theData[2], theData[3]); IGeometry geomQuad =
	     * ShapeFactory .createArc(current,new Point2D.Double(theData[0],
	     * theData[1]),new Point2D.Double(theData[2], theData[3]));
	     * DefaultFeature dfQuad = (DefaultFeature) df.cloneRow();
	     * dfQuad.setGeometry(geomQuad); int indexQuad =
	     * addGeometry(geomQuad, dfQuad .getAttributes());
	     * selectedRowAux.add(new DefaultRowEdited(dfQuad,
	     * IRowEdited.STATUS_ADDED, indexQuad)); newGp1 = new
	     * GeneralPathX(); newGp1.moveTo(theData[0], theData[1]); //
	     * lastPoint=new Point2D.Double(theData[0], theData[1]); break; case
	     * PathIterator.SEG_CUBICTO: newGp1.curveTo(theData[0], theData[1],
	     * theData[2], theData[3], theData[4], theData[5]); IGeometry
	     * geomCurve = ShapeFactory .createArc(new
	     * Point2D.Double(theData[0], theData[1]),new
	     * Point2D.Double(theData[2], theData[3]),new
	     * Point2D.Double(theData[4], theData[5])); DefaultFeature dfCurve =
	     * (DefaultFeature) df.cloneRow(); dfCurve.setGeometry(geomCurve);
	     * int indexCurve = addGeometry(geomCurve, dfCurve
	     * .getAttributes()); selectedRowAux.add(new
	     * DefaultRowEdited(dfCurve, IRowEdited.STATUS_ADDED, indexCurve));
	     * newGp1 = new GeneralPathX(); newGp1.moveTo(theData[0],
	     * theData[1]); // lastPoint=new Point2D.Double(theData[0],
	     * theData[1]); break; case PathIterator.SEG_CLOSE: // if
	     * (firstPoint!=null) { // newGp1=new GeneralPathX(); //
	     * newGp1.moveTo(firstPoint.getX(),firstPoint.getY()); //
	     * newGp1.lineTo(lastPoint.getX(),lastPoint.getY()); // IGeometry
	     * geomClose = ShapeFactory // .createPolyline2D(newGp1); //
	     * DefaultFeature dfClose = (DefaultFeature) df.cloneRow(); //
	     * dfClose.setGeometry(geomClose); // int indexClose =
	     * addGeometry(geomClose, dfClose // .getAttributes()); //
	     * selectedRowAux.add(new DefaultRowEdited(dfClose, //
	     * IRowEdited.STATUS_ADDED, indexClose)); // newGp1 = new
	     * GeneralPathX(); // newGp1.moveTo(theData[0], theData[1]); // } //
	     * if (isFirstPart) // newGp1.closePath(); // else //
	     * newGp2.closePath(); break;
	     */
	    } // end switch

	    theIterator.next();
	} // end while loop
	refresh();
    }

    private void exploitPolygon(DefaultRowEdited dre, ArrayList selectedRowAux) {
	GeneralPathX newGp1 = null;
	DefaultFeature df = (DefaultFeature) dre.getLinkedRow().cloneRow();
	PathIterator theIterator = df.getGeometry().getPathIterator(null,
		FConverter.FLATNESS);
	double[] theData = new double[6];
	int theType;
	int numParts = 0;
	Point2D initialPoint = null;
	while (!theIterator.isDone()) {
	    theType = theIterator.currentSegment(theData);
	    switch (theType) {

	    case PathIterator.SEG_MOVETO:
		numParts++;
		if (newGp1 != null) {
		    IGeometry geomLine = ShapeFactory.createPolygon2D(newGp1);
		    DefaultFeature dfLine = (DefaultFeature) df.cloneRow();
		    dfLine.setGeometry(geomLine);
		    int indexLine = addGeometry(geomLine,
			    dfLine.getAttributes());
		    selectedRowAux.add(new DefaultRowEdited(dfLine,
			    IRowEdited.STATUS_ADDED, indexLine));
		}
		newGp1 = new GeneralPathX();
		initialPoint = new Point2D.Double(theData[0], theData[1]);
		newGp1.moveTo(theData[0], theData[1]);
		break;

	    case PathIterator.SEG_LINETO:
		newGp1.lineTo(theData[0], theData[1]);
		// newGp1 = new GeneralPathX();
		// newGp1.moveTo(theData[0], theData[1]);
		break;

	    case PathIterator.SEG_QUADTO:
		newGp1.quadTo(theData[0], theData[1], theData[2], theData[3]);
		// newGp1 = new GeneralPathX();
		// newGp1.moveTo(theData[0], theData[1]);
		break;
	    case PathIterator.SEG_CUBICTO:
		newGp1.curveTo(theData[0], theData[1], theData[2], theData[3],
			theData[4], theData[5]);
		// newGp1 = new GeneralPathX();
		// newGp1.moveTo(theData[0], theData[1]);
		break;
	    case PathIterator.SEG_CLOSE:
		if (initialPoint != null) {
		    newGp1.lineTo(initialPoint.getX(), initialPoint.getY());
		}
		// System.out.println("aquí");
		// if (isFirstPart)
		// newGp1.closePath();
		// else
		// newGp2.closePath();
		break;
	    } // end switch

	    theIterator.next();
	} // end while loop
	if (newGp1 != null) {
	    IGeometry geomLine = ShapeFactory.createPolygon2D(newGp1);
	    DefaultFeature dfLine = (DefaultFeature) df.cloneRow();
	    dfLine.setGeometry(geomLine);
	    int indexLine = addGeometry(geomLine, dfLine.getAttributes());
	    selectedRowAux.add(new DefaultRowEdited(dfLine,
		    IRowEdited.STATUS_ADDED, indexLine));
	}
	refresh();
    }

    /**
     * Add a diferent option.
     * 
     * @param s
     *            Diferent option.
     */
    public void addOption(String s) {
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.iver.cit.gvsig.gui.cad.CADTool#addvalue(double)
     */
    public void addValue(double d) {

    }

    public String getName() {
	return PluginServices.getText(this, "exploit_");
    }

    @Override
    public String toString() {
	return "_exploit";
    }

    @Override
    public boolean isApplicable(int shapeType) {
	switch (shapeType) {
	case FShape.POINT:
	case FShape.CIRCLE:
	case FShape.ARC:
	case FShape.ELLIPSE:
	case FShape.POLYGON:
	case FShape.MULTIPOINT:
	    return false;
	}
	return true;
    }

    public void drawOperation(Graphics g, ArrayList pointList) {
	// TODO Auto-generated method stub

    }

    @Override
    public boolean isMultiTransition() {
	// TODO Auto-generated method stub
	return false;
    }

    public void transition(InputEvent event) {
	// TODO Auto-generated method stub

    }
}
